name: "test"

on: # rebuild any PRs and main branch changes
  # Triggers the workflow on push or pull request events, but only for the master branch
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching for Releases: v*
    branches: [ master ]
  pull_request:
    branches: [ master ]
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# env:
#   BASE_PATH_fromJSON:
#   REPO_NAME_fromJSON:
#   PROJ_NAME_fromJSON:
#   PROD_NAME_fromJSON:
#   VER_1C_fromJSON1:
#   VER_1C_fromJSON2:
#   VER_1C_fromJSON3:
#   PROD_VER_fromConfiguration:

jobs:
  testJob01:
    runs-on: ubuntu-latest

    steps:
    - name: get repository
      uses: actions/checkout@master                 #  v1

    - name: get version
      id: get_version
      uses: ./                                      #  uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'package.json'
        prop_path: 'version'                        #  "version": "0.2.0",

    - name: get ver
      id: get_ver
      uses: ./                                      #  uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'package.json'
        prop_path: 'ver_onec'                        #  "version": "0.2.0",

    - name: Get Base_Path_fromJSON
      id: get_base_path
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'build_config.json'
        prop_path: 'base_path'
    
    - name: Get Repo_Name_fromJSON
      id: get_repo_name
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'build_config.json'
        prop_path: 'repo_name'
    
    - name: Get Proj_Name_fromJSON
      id: get_proj_name
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'build_config.json'
        prop_path: 'proj_name'
    
    - name: Get Prod_Name_fromJSON
      id: get_prod_name
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'build_config.json'
        prop_path: 'prod_name'
    
    - name: get version1c
      id: get_version1c
      uses: ./
      with: 
        path: 'build_config.json'
        prop_path: 'ver_onec'

    - name: Get VER_1C_fromJSON
      id: get_ver1c
      uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'build_config.json'
        prop_path: 'ver_onec'                        #  "version": "0.2.0",
    
#     - name: get nested json property
#       id: get_json_property
#       uses: ./
#       with: 
#         path: 'package.json'
#         prop_path: 'scripts.format'                 #    "scripts": { "build": "tsc && npm run pack", "format": "prettier --write **/*.ts", ..., ... }
    
        # echo ${{ steps.get_json_property.outputs.propStr }}
    - name: Check result 11
      run: |
        echo GITHUB_WORKSPACE = $GITHUB_WORKSPACE
        echo GITHUB_WORKSPACE = ${{ env.GITHUB_WORKSPACE }}
        echo
        echo BASE_PATH_fromJSON = ${{ steps.get_base_path.outputs.prop }}
        echo REPO_NAME_fromJSON = ${{ steps.get_repo_name.outputs.prop }}
        echo PROJ_NAME_fromJSON = ${{ steps.get_proj_name.outputs.prop }}
        echo PROD_NAME_fromJSON = ${{ steps.get_prod_name.outputs.prop }}
        echo
        echo VER_1C_fromJSON1    = ${{ steps.get_ver1c.outputs.prop }}
        echo VER_1C_fromJSON2    = ${{ steps.get_version1c.outputs.prop }}
        echo
        echo PROD_VER_fromConfiguration = ${{ steps.get_base_path.outputs.prop }}
        
    
#    - name: Check result 13
#      run: |
#        echo ${{ steps.get_version.outputs.prop }}
#        echo "::set-output name=VER_1C_fromJSON1::${{ steps.get_version.outputs.prop }}"
    
    - name: Check result 14
        # echo ${{ steps.get_version.outputs.prop }}
      run: |
        echo "BASE_PATH_fromJSON=${{ steps.get_base_path.outputs.prop }}" >> $GITHUB_ENV
        echo "REPO_NAME_fromJSON=${{ steps.get_repo_name.outputs.prop }}" >> $GITHUB_ENV
        echo "PROJ_NAME_fromJSON=${{ steps.get_proj_name.outputs.prop }}" >> $GITHUB_ENV
        echo "PROD_NAME_fromJSON=${{ steps.get_prod_name.outputs.prop }}" >> $GITHUB_ENV
        echo "VER_1C_fromJSON1=${{ steps.get_ver1c.outputs.prop }}" >> $GITHUB_ENV    #  it works
        echo "VER_1C_fromJSON2=${{ steps.get_version1c.outputs.prop }}" >> $GITHUB_ENV    #  it works
#      env:
#        VER_1C_fromJSON3: ${{ steps.get_version.outputs.prop }}
    
    #- name: Check result 15
    #  run: |
    #    echo grep "<version>" src/Configuration/Configuration.mdo | grep -oP "(?<version>)(\d+)\.(\d+)\.(\d+)\.(\d+)(?=</version>)")"
    #    grep "<version>" src/Configuration/Configuration.mdo | grep -oP "(?<version>)(\d+)\.(\d+)\.(\d+)\.(\d+)(?=</version>)")"
    #    echo "::set-output name=PROD_VER_fromConfiguration::$(grep "<version>" src/Configuration/Configuration.mdo | grep -oP "(?<version>)(\d+)\.(\d+)\.(\d+)\.(\d+)(?=</version>)")"
    
        # echo VER_1C_fromJSON2 = $VER_1C_fromJSON2                                       #  it works in LINUX
        # echo VER_1C_fromJSON2 = ${{ env.VER_1C_fromJSON2 }}                             #  it works
        # echo VER_1C_fromJSON2 = ${{ steps.get_version.outputs.VER_1C_fromJSON2 }}       #  doesn't work
    - name: Check result 16
      run: |
        echo BASE_PATH_fromJSON = $BASE_PATH_fromJSON
        echo BASE_PATH_fromJSON = ${{ env.BASE_PATH_fromJSON }}
        echo BASE_PATH_fromJSON = ${{ steps.get_base_path.outputs.BASE_PATH_fromJSON }}       #  doesn't work
        echo
        echo REPO_NAME_fromJSON = $REPO_NAME_fromJSON
        echo REPO_NAME_fromJSON = ${{ env.REPO_NAME_fromJSON }}
        echo REPO_NAME_fromJSON = ${{ steps.get_repo_name.outputs.REPO_NAME_fromJSON }}       #  doesn't work
        echo
        echo PROJ_NAME_fromJSON = $PROJ_NAME_fromJSON
        echo PROJ_NAME_fromJSON = ${{ env.PROJ_NAME_fromJSON }}
        echo PROJ_NAME_fromJSON = ${{ steps.get_proj_name.outputs.PROJ_NAME_fromJSON }}       #  doesn't work
        echo
        echo PROD_NAME_fromJSON = $PROD_NAME_fromJSON
        echo PROD_NAME_fromJSON = ${{ env.PROD_NAME_fromJSON }}
        echo PROD_NAME_fromJSON = ${{ steps.get_prod_name.outputs.PROD_NAME_fromJSON }}       #  doesn't work
        echo
        echo VER_1C_fromJSON1 = $VER_1C_fromJSON1
        echo VER_1C_fromJSON1 = ${{ env.VER_1C_fromJSON1 }}
        echo VER_1C_fromJSON1 = ${{ steps.get_version.outputs.VER_1C_fromJSON1 }}
        echo
        echo VER_1C_fromJSON2 = $VER_1C_fromJSON2
        echo VER_1C_fromJSON2 = ${{ env.VER_1C_fromJSON2 }}
        echo VER_1C_fromJSON2 = ${{ steps.get_version.outputs.VER_1C_fromJSON2 }}
        echo
        echo PROD_VER_fromConfiguration = ${{ env.PROD_VER_fromConfiguration }}

