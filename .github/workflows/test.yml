name: "test"

on: # rebuild any PRs and main branch changes
  # Triggers the workflow on push or pull request events, but only for the master branch
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching for Releases: v*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


env:
  VER_1C_fromJSON1:
  VER_1C_fromJSON2:
  VER_1C_fromJSON3:
  PROD_VER_fromConfiguration:
  

jobs:
  testJob01:
    runs-on: ubuntu-latest

    steps:
    - name: get repository
      uses: actions/checkout@master                 #  v1

    - name: get version
      id: get_version
      uses: ./                                      #  uses: notiz-dev/github-action-json-property@release
      with: 
        path: 'package.json'
        prop_path: 'version'                        #  "version": "0.2.0",
    
    - name: Check result 11
      run: |
        echo ${{ steps.get_version.outputs.prop }}
        echo GITHUB_WORKSPACE = $GITHUB_WORKSPACE
        
    - name: get nested json property
      id: get_json_property
      uses: ./
      with: 
        path: 'package.json'
        prop_path: 'scripts.format'                 #    "scripts": { "build": "tsc && npm run pack", "format": "prettier --write **/*.ts", ..., ... }
    
    - name: Check result 12
      run: |
        echo ${{ steps.get_json_property.outputs.prop }}
        echo ${{ steps.get_json_property.outputs.propStr }}
    
    - name: Check result 13
      run: |
        echo ${{ steps.get_version.outputs.prop }}
        echo "::set-output name=VER_1C_fromJSON1::${{ steps.get_version.outputs.prop }}"
    
    - name: Check result 14
        # echo "VER_1C_fromJSON2=${{ steps.get_version.outputs.prop }}" >> $GITHUB_ENV    #  it works
      run: |
        echo ${{ steps.get_version.outputs.prop }}
        echo "VER_1C_fromJSON2=${{ steps.get_version.outputs.prop }}" >> $GITHUB_ENV
      env:
        VER_1C_fromJSON3: ${{ steps.get_version.outputs.prop }}
    
    #- name: Check result 15
    #  run: |
    #    echo grep "<version>" src/Configuration/Configuration.mdo | grep -oP "(?<version>)(\d+)\.(\d+)\.(\d+)\.(\d+)(?=</version>)")"
    #    grep "<version>" src/Configuration/Configuration.mdo | grep -oP "(?<version>)(\d+)\.(\d+)\.(\d+)\.(\d+)(?=</version>)")"
    #    echo "::set-output name=PROD_VER_fromConfiguration::$(grep "<version>" src/Configuration/Configuration.mdo | grep -oP "(?<version>)(\d+)\.(\d+)\.(\d+)\.(\d+)(?=</version>)")"
    
    - name: Check result 16
        # echo VER_1C_fromJSON2 = $VER_1C_fromJSON2                                       #  it works in LINUX
        # echo VER_1C_fromJSON2 = ${{ env.VER_1C_fromJSON2 }}                             #  it works
        # echo VER_1C_fromJSON2 = ${{ steps.get_version.outputs.VER_1C_fromJSON2 }}       #  doesn't work
      run: |
        echo VER_1C_fromJSON1 = $VER_1C_fromJSON1
        echo VER_1C_fromJSON1 = ${{ env.VER_1C_fromJSON1 }}
        echo VER_1C_fromJSON1 = ${{ steps.get_version.outputs.VER_1C_fromJSON1 }}
        echo VER_1C_fromJSON2 = $VER_1C_fromJSON2
        echo VER_1C_fromJSON2 = ${{ env.VER_1C_fromJSON2 }}
        echo VER_1C_fromJSON2 = ${{ steps.get_version.outputs.VER_1C_fromJSON2 }}
        echo VER_1C_fromJSON3 = ${{ env.VER_1C_fromJSON3 }}
        echo PROD_VER_fromConfiguration = ${{ env.PROD_VER_fromConfiguration }}

    - name: get json file v1
      id: set_var1
        # echo GITHUB_WORKSPACE = $GITHUB_WORKSPACE                     #  it works
      run: |
        echo GITHUB_WORKSPACE = $GITHUB_WORKSPACE
        ls -la ${{ github.WORKSPACE }}
        content=`cat package.json`
        # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        echo "::set-output name=packageJson1::$content"
    
    - name: get json file v2
      id: set_var2
        # echo GITHUB_WORKSPACE = ${{ github.WORKSPACE }}               #  it works
      run: |
        echo GITHUB_WORKSPACE = ${{ github.WORKSPACE }}
        ls -la ${{ github.WORKSPACE }}
        content=`cat package.json`
        # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        echo "::set-output name=packageJson2::$content"
        echo "packageJson3=$content" >> $GITHUB_ENV
    
    - name: Check result 21
      run: |
        echo packageJson1 = ${{ env.packageJson1 }}
        echo packageJson2 = ${{ env.packageJson2 }}
        echo packageJson3 = ${{ env.packageJson3 }}
        echo "VER_1C_fromJSON4=${{ fromJson(steps.set_var2.outputs.packageJson3).version }}" >> $GITHUB_ENV
        echo "PROD_VER_fromConfiguration2=${{ fromJson(steps.set_var2.outputs.packageJson3).scripts.format }}" >> $GITHUB_ENV
    
    - name: Check result 22
      run: |
        echo version = "${{ fromJson(steps.set_var2.outputs.packageJson2).version }}"
        echo scripts.format = "${{ fromJson(steps.set_var2.outputs.packageJson2).scripts.format }}"
    
    - name: Check result 23
      run: |
        echo VER_1C_fromJSON4 = ${{ env.VER_1C_fromJSON4 }}
        echo PROD_VER_fromConfiguration2 = ${{ env.PROD_VER_fromConfiguration2 }}
        
    #  doesn't work !
    - name: Check result 24
      run: |
        echo version = "${{ fromJson(env.packageJson3).version }}"
        echo scripts.format = "${{ fromJson(env.packageJson3).scripts.format }}"
